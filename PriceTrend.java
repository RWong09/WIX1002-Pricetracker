
import java.awt.Color;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.CategoryDataset;

public class PriceTrend extends javax.swing.JFrame {

    private CategoryDataset pricedata;

    /**
     * Creates new form PriceTrend
     */
    public PriceTrend() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        Pricechart = new javax.swing.JPanel();
        Startingdate = new javax.swing.JTextField();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        Spinner = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jPanel2.setBackground(new java.awt.Color(255, 153, 153));

        jButton1.setBackground(new java.awt.Color(255, 153, 153));
        jButton1.setText("Show Chart");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        Pricechart.setBackground(new java.awt.Color(255, 204, 204));
        Pricechart.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Price Trend", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));
        Pricechart.setLayout(new javax.swing.BoxLayout(Pricechart, javax.swing.BoxLayout.LINE_AXIS));

        Startingdate.setBackground(new java.awt.Color(255, 204, 204));
        Startingdate.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(0, 255, 153), new java.awt.Color(153, 255, 51), null, null));
        Startingdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartingdateActionPerformed(evt);
            }
        });

        jTextField1.setText("jTextField1");

        jTextField2.setText("jTextField2");

        jTextField3.setText("jTextField3");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel3.setText("Date:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText("Total Days:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Startingdate, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Pricechart, javax.swing.GroupLayout.PREFERRED_SIZE, 1178, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(12, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Startingdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(3, 3, 3)
                .addComponent(Pricechart, javax.swing.GroupLayout.DEFAULT_SIZE, 514, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap())
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        getContentPane().add(jPanel2);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        showChart();

    }//GEN-LAST:event_jButton1ActionPerformed
    public void showChart() {
        String url = "jdbc:mysql://127.0.0.1:3306/pricetracker";
        String user = "root";
        String password = "";

        DefaultCategoryDataset pricedata = new DefaultCategoryDataset();
        double min = 9999, max = 0, buffer = 0.02;

//    try (Connection sqlconnection = DriverManager.getConnection(url, user, password)) {
//        int itemCode = 2;
//        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
//        LocalDate localDate = LocalDate.parse(Startingdate.getText(), dateFormatter);
//
//        String currentdate_price = "SELECT price FROM pricecatcher WHERE date=? AND item_code=?";
//        String countItem = "SELECT COUNT(item_code) FROM pricecatcher WHERE date=? AND item_code=? ";
//
//        try (PreparedStatement currentprice = sqlconnection.prepareStatement(currentdate_price);
//             PreparedStatement count_Item = sqlconnection.prepareStatement(countItem)) {
//
//            int loopCounter = 1;
//            //int Countdays = Integer.parseInt(Totaldays.getText()); 
//            int Countdays=(int) Spinner.getValue();
//            while (loopCounter <= Countdays) {
//                currentprice.setDate(1, java.sql.Date.valueOf(localDate));
//                currentprice.setInt(2, itemCode);
//                ResultSet currentPrice = currentprice.executeQuery();
//
//                count_Item.setDate(1, java.sql.Date.valueOf(localDate));
//                count_Item.setInt(2, itemCode);
//                ResultSet CountItem = count_Item.executeQuery();
//
//                int countitem = 0;
//                if (CountItem.next()) {
//                    countitem = CountItem.getInt(1);
//                }
//                System.out.println("countitem: " + countitem);
//
//                double totalprice = 0;
//                while (currentPrice.next()) {
//                    double price = currentPrice.getDouble("price");
//                    totalprice += price;
//                }
//
//                DecimalFormat decimalFormat = new DecimalFormat("#.00");
//                double avg = totalprice / countitem * 1.0;
//                String AVG = decimalFormat.format(avg);
//                double Avg = Double.parseDouble(AVG);
//                if(Avg<min){
//                min=Avg;
//                }
//                if(Avg>max){
//                    max=Avg;
//                }
//                System.out.println(loopCounter+"round " + Avg);
//                System.out.println("min"+min);
//                System.out.println("max"+max);
//
//                pricedata.addValue(Avg, "price for " + localDate, localDate.toString());
//                localDate = localDate.plusDays(1);
//                loopCounter++;
//            }
//        }
//    } catch (SQLException ex) {
//        ex.printStackTrace(System.out);
//    }
        try (Connection sqlconnection = DriverManager.getConnection(url, user, password)) {
            int itemCode = 2;
            DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            LocalDate localDate = LocalDate.parse(Startingdate.getText(), dateFormatter);

            String avgquery = "SELECT ROUND(AVG(price), 2) AS avg "
                    + "FROM pricecatcher "
                    + "WHERE date=? "
                    + "AND item_code = ?;";

            try (PreparedStatement AVG = sqlconnection.prepareStatement(avgquery)) {
                double avg=0 ;
                int loopCounter = 1;
                int Countdays = (int) Spinner.getValue();
                while (loopCounter <= Countdays) {
                    AVG.setDate(1, java.sql.Date.valueOf(localDate));
                    AVG.setInt(2, itemCode);
                    ResultSet Avg = AVG.executeQuery();

                    while (Avg.next()) {
                        avg = Avg.getDouble("avg");
                    }

//                    DecimalFormat decimalFormat = new DecimalFormat("#.00");
//                    String avgString = decimalFormat.format(avgDouble);
//                    double avg = Double.parseDouble(avgString);
                    System.out.println(loopCounter+"avg:"+avg);
                    if (avg < min) {
                        min = avg;
                        System.out.println("min:"+min);
                    }
                    if (avg > max) {
                        max = avg;
                        System.out.println("max:"+max);
                    }
                    pricedata.addValue(avg, "price for " + localDate, localDate.toString());
                    localDate = localDate.plusDays(1);
                    loopCounter++;
                }
            }
        } catch (SQLException ex) {
            ex.printStackTrace(System.out);
        }

        JFreeChart jchart = ChartFactory.createBarChart("Price trend", "Date", "Price", pricedata,
                PlotOrientation.HORIZONTAL, true, true, false);
        CategoryPlot plot = jchart.getCategoryPlot();
        plot.setRangeGridlinePaint(Color.black);
        NumberAxis yAxis = (NumberAxis) plot.getRangeAxis();
        yAxis.setLowerBound(min - buffer);
        yAxis.setUpperBound(max + buffer);

        ChartPanel chartPanel = new ChartPanel(jchart);
        chartPanel.setPreferredSize(new java.awt.Dimension(1170, 500));

//        ChartFrame chartFrm = new ChartFrame("pt", jchart, true);
//        chartFrm.setVisible(true);
//        chartFrm.setSize(500, 400);
//        JFrame frame = new JFrame("Price Trend Chart");
//        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//        frame.getContentPane().add(chartPanel);
//        frame.pack();
//        frame.setVisible(true);
        Pricechart.removeAll();
        Pricechart.add(chartPanel);
        Pricechart.updateUI();
        Pricechart.revalidate();
        Pricechart.repaint();
    }
    private void StartingdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartingdateActionPerformed

    }//GEN-LAST:event_StartingdateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PriceTrend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PriceTrend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PriceTrend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PriceTrend.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PriceTrend().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Pricechart;
    private javax.swing.JSpinner Spinner;
    private javax.swing.JTextField Startingdate;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    // End of variables declaration//GEN-END:variables
}
